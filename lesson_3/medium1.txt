Question 1

Let's do some "ASCII Art" (a stone-age form of nerd artwork from back in the days before computers had video screens).

For this practice problem, write a one-line program that creates the following output 10 times, with the subsequent line indented 1 space to the right:

The Flintstones Rock!
 The Flintstones Rock!
  The Flintstones Rock!


  => 10.times{|num| puts (" " ** num) + "The Flintstones Rock!" }

#######################################################################
Question 2

The result of the following statement will be an error:

  puts "the value of 40 + 2 is " + (40 + 2)

Why is this and what are two possible ways to fix this?

  => the current code is not concatenating a string but is attempting to add 42 to a sentence. Which is not possible. 

  to fix this try 
    puts "the value of 40 + 2 is #{40 + 2}"
  or
    puts "the value of 40 + 2 is " + (40 + 2).to_s

#######################################################################
Question 3

Alan wrote the following method, which was intended to show all of the factors of the input number:

def factors(number)
  dividend = number
  divisors = []
  begin
    divisors << number / dividend if number % dividend == 0
    dividend -= 1
  end until dividend == 0
  divisors
end
Alyssa noticed that this will fail if the input is 0, or a negative number, and asked Alan to change the loop. How can you change the loop construct (instead of using begin/end/until) to make this work? Note that we're not looking to find the factors for 0 or negative numbers, but we just want to handle it gracefully instead of raising an exception or going into an infinite loop.

Bonus 1

What is the purpose of the number % dividend == 0 ?

Bonus 2

What is the purpose of the second-to-last line in the method (the divisors before the method's end)?


  =>The way to fix this would be to use .times 
  This way, if the user inputs 0, it will run the loop and therefore try to 'divide by zero'...zero times, returning an empty array. Same with negative numbers. It's not going to run the loop -3 times.

  def factors(number)
  dividend = number
  divisors = []
  number.times do
    divisors << number / dividend if number % dividend == 0
    dividend -= 1
  end
  divisors
end

BONUS 1

  number % dividend is the conditional that tests whether or not a number is a factor of the inputed number. If it has zero remainders, hence a % b == 0, than its a factor

BONUS 2

   # divisors 
    on line 8, returns the divisors array by default, because it is the last line evaluated in the method

#######################################################################
Question 4

Alyssa was asked to write an implementation of a rolling buffer. Elements are added to the rolling buffer and if the buffer becomes full, then new elements that are added will displace the oldest elements in the buffer.

She wrote two implementations saying, "Take your pick. Do you like << or + for modifying the buffer?". Is there a difference between the two, other than what operator she chose to use to add an element to the buffer?

  def rolling_buffer1(buffer, max_buffer_size, new_element)
    buffer << new_element
    buffer.shift if buffer.size > max_buffer_size
    buffer
  end

  def rolling_buffer2(input_array, max_buffer_size, new_element)
    buffer = input_array + [new_element]
    buffer.shift if buffer.size > max_buffer_size
    buffer
  end

  => The first implementation takes three parameters and uses the first and the last to edit the buffer. It simply appends the new_element argument to the end of the buffer argument. It creates no new variables inside itself.
     The second implementation takes three arguments as well but, because it is using array concatenation to edit the buffer, and this creates a new array out of two arrays, it must declare another variable to store that new array to and subsequently return.

  =>In short, the first implementation mutates the caller, while the second does not.

#######################################################################
Question 5

Alyssa asked Ben to write up a basic implementation of a Fibonacci calculator, A user passes in two numbers, and the calculator will keep computing the sequence until some limit is reached.

Ben coded up this implementation but complained that as soon as he ran it, he got an error. Something about the limit variable. What's wrong with the code?

  limit = 15

  def fib(first_num, second_num)
    while second_num < limit
      sum = first_num + second_num
      first_num = second_num
      second_num = sum
    end
    sum
  end

  result = fib(0, 1)
  puts "result is #{result}"

How would you fix this so that it works?

  => The problem is that the method is trying to access the limit variable which is in an outer scope, and since methods create there own scope, out of the flow of execution, it does not see the limit variable.
     I would fix this by putting the limit variable on the first line inside the method. He could then create a third parameter, which could default to 15, but would allow for a limit argument.

#######################################################################
Question 6

In an earlier practice problem we saw that depending on variables to be modified by called methods can be tricky:

  def tricky_method(a_string_param, an_array_param)
    a_string_param += "rutabaga"
    an_array_param << "rutabaga"
  end

  my_string = "pumpkins"
  my_array = ["pumpkins"]
  tricky_method(my_string, my_array)

  puts "My string looks like this now: #{my_string}"
  puts "My array looks like this now: #{my_array}"

We learned that whether the above "coincidentally" does what we think we wanted "depends" upon what is going on inside the method.

How can we refactor this practice problem to make the result easier to predict and easier for the next programmer to maintain?

  => It seems to me that the simplest fix would be to go into the method and change the action being done to the string parameter from concatenation via += , to Appending via <<

#######################################################################
Question 7

What is the output of the following code?

  answer = 42

  def mess_with_it(some_number)
    some_number += 8
  end

  new_answer = mess_with_it(answer)

  p answer - 8

  => new_answer will equal 50
     it will print 34
#######################################################################
Question 8

One day Spot was playing with the Munster family's home computer and he wrote a small program to mess with their demographic data:

  munsters = {
    "Herman" => { "age" => 32, "gender" => "male" },
    "Lily" => { "age" => 30, "gender" => "female" },
    "Grandpa" => { "age" => 402, "gender" => "male" },
    "Eddie" => { "age" => 10, "gender" => "male" },
    "Marilyn" => { "age" => 23, "gender" => "female"}
  }

  def mess_with_demographics(demo_hash)
    demo_hash.values.each do |family_member|
      family_member["age"] += 42
      family_member["gender"] = "other"
    end
  end

After writing this method, he typed the following...and before Grandpa could stop him, he hit the Enter key with his tail:

  mess_with_demographics(munsters)

Did the family's data get ransacked? Why or why not?


#######################################################################
Question 9

Method calls can take expressions as arguments. Suppose we define a function called rps as follows, which follows the classic rules of rock-paper-scissors game, but with a slight twist that it declares whatever hand was used in the tie as the result of that tie.

  def rps(fist1, fist2)
    if fist1 == "rock"
      (fist2 == "paper") ? "paper" : "rock"
    elsif fist1 == "paper"
      (fist2 == "scissors") ? "scissors" : "paper"
    else
      (fist2 == "rock") ? "rock" : "scissors"
    end
  end

What is the result of the following call?

  puts rps(rps(rps("rock", "paper"), rps("rock", "scissors")), "rock")


  => paper

#######################################################################
Question 10

Consider these two simple methods:

  def foo(param = "no")
    "yes"
  end

  def bar(param = "no")
    param == "no" ? "yes" : "no"
  end

What would be the output of this code:

  bar(foo)


  => "no". foo has a param that defaults to "no". That param goes unused and it returns "yes". bar is called with foo and therefore "yes" as a parameter. bar has a default param of "no", but we are passing "yes" into it so it will equal "yes". Therefore the ternary operator in bar will evaluate to false, returning "no"
  
  **deep breath
