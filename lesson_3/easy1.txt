What would you expect the code below to print out?

numbers = [1, 2, 2, 3]
numbers.uniq

puts numbers

=> .uniq() is not destructive so it will print out the original array

#####################################################################

Describe the difference between ! and ? in Ruby. And explain what would happen in the following scenarios:

what is != and where should you use it?
put ! before something, like !user_name
put ! after something, like words.uniq!
put ? before something
put ? after something
put !! before something, like !!user_name

=> != says 'is not equal'. You could use in a conditional
=> !<before> returns the opposite of the objects boolean
=> <after>! can signify that a method is destructive
=> ?<before> is for ternary operations. ie, # true ? do Truth : do false
=> <after>? can be a method
=> !!<before> outputs the boolean value of the proceeding object

#####################################################################

Replace the word "important" with "urgent" in this string:

advice = "Few things in life are as important as house training your pet dinosaur."

=> advice.gsub!('important', 'urgent')

#####################################################################

The Ruby Array class has several methods for removing items from the array. Two of them have very similar names. Let's see how they differ:

  numbers = [1, 2, 3, 4, 5]

What do the following method calls do (assume we reset numbers to the original array between method calls)?

  numbers.delete_at(1) => 2
  numbers.delete(1) => 1

#####################################################################

Programmatically determine if 42 lies between 10 and 100.

hint: Use Ruby's range object in your solution.

  => (10..100).include?(42) => true
#####################################################################

Starting with the string:

famous_words = "seven years ago..."

show two different ways to put the expected "Four score and " in front of it.

  => famous_words.prepend('Four score and ')
  => famous_words.insert(0, 'Four score and ')

#####################################################################

Fun with gsub:

  def add_eight(number)
    number + 8
  end

  number = 2

  how_deep = "number"
  5.times { how_deep.gsub!("number", "add_eight(number)") }

  p how_deep

This gives us a string that looks like a "recursive" method call:

  "add_eight(add_eight(add_eight(add_eight(add_eight(number)))))"

If we take advantage of Ruby's Kernel#eval method to have it execute this string as if it were a "recursive" method call

  eval(how_deep)

what will be the result?

  => SOLUTION 7: 42

#####################################################################

If we build an array like this:

  flintstones = ["Fred", "Wilma"]
  flintstones << ["Barney", "Betty"]
  flintstones << ["BamBam", "Pebbles"]

We will end up with this "nested" array:

  ["Fred", "Wilma", ["Barney", "Betty"], ["BamBam", "Pebbles"]]

Make this into an un-nested array.

  =>flinstones.flatten!
#####################################################################

Given the hash below

flintstones = { "Fred" => 0, "Wilma" => 1, "Barney" => 2, "Betty" => 3, "BamBam" => 4, "Pebbles" => 5 }

Turn this into an array containing only two elements: Barney's name and Barney's number

  => flintstones.assoc("Barney")

  #####################################################################


















